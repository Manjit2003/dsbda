# -*- coding: utf-8 -*-
"""Practical no.1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10nGAbRZ-9D9bYD84JQ9iiEMIkjN07nyw
"""

# import pandas library
import pandas as pd

# load iris dataset into pandas dataframe
df = pd.read_csv("/content/iris.csv")

# display dataset
print("First 5 rows of the dataset:")
print(df.head())

# display last rows of dataset
print("\nLast 5 rows of the dataset:")
print(df.tail())

# dimension of dataframe
print("\nDimensions of the dataframe (rows, columns):", df.shape)

# dataset info
print("\nInformation about the dataset:")
print(df.info())

# statistical summary of the dataset
print("\nStatistical summary of the dataset:")
print(df.describe())

# Data Preprocessing
print("\nCheck for missing values:")
print(df.isnull())

print("\nCheck which columns have missing values:")
print(df.isnull().any())

print("\nSum of missing values in each column:")
print(df.isnull().sum())

print("\nData types of each column:")
print(df.dtypes)

# Data Formatting
# change data type of petal length to int
df['petal_length'] = df['petal_length'].astype("int")
print("\nData types after changing 'petal_length' to int:")
print(df.dtypes)

# Data Normalization using MinMaxScaler
# import library
from sklearn import preprocessing
min_max_scaler = preprocessing.MinMaxScaler()

# separate feature from class label
x = df.iloc[:, :4]
print("\nFeatures (first 5 rows):")
print(x.head())

# create object to transform data to fit minmax processor
x_scaled = min_max_scaler.fit_transform(x)

# run normalizer on dataframe
df_normalized = pd.DataFrame(x_scaled)
print("\nNormalized data (first 5 rows):")
print(df_normalized.head())

# Categorical variable to Quantitative variable using One-Hot Encoding
# observe unique values for species column
print("\nUnique values in the 'species' column:")
print(df['species'].unique())

# import library
from sklearn import preprocessing
enc = preprocessing.OneHotEncoder()

# remove target variable from dataset
features_df = df.drop(columns=['species'])
print("\nFeatures dataframe (first 5 rows):")
print(features_df.head())

# apply one hot encoder for species column
enc_df = (enc.fit_transform(df[['species']])).toarray()
enc_df = pd.DataFrame(enc_df, columns=['Iris-setosa', 'Iris-versicolor', 'Iris-virginica'])

# join encoded values with feature variable
df_encoded = features_df.join(enc_df)

# observe merged dataframe
print("\nMerged dataframe after One-Hot Encoding:")
print(df_encoded.head())