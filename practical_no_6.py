# -*- coding: utf-8 -*-
"""Practical no. 6

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GvgJcMk_fGRZ2V53i_ZoWSgYO_6mx_X6
"""

# Commented out IPython magic to ensure Python compatibility.
# Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from mlxtend.plotting import plot_confusion_matrix
from sklearn.metrics import confusion_matrix, accuracy_score, classification_report, precision_score, recall_score, f1_score
import warnings

warnings.filterwarnings("ignore")
# %matplotlib inline

# Load data
iris = load_iris()
print("Keys of iris dataset:")
print(iris.keys())

x = pd.DataFrame(iris['data'], columns=iris['feature_names'])
y = pd.DataFrame(iris['target'], columns=['target'])
print("\nFirst few rows of feature data (X):")
print(x.head())

print("\nShapes of feature data (X) and target data (y):")
print(x.shape, y.shape)

print("\nInformation about feature data (X):")
print(x.info())

print("\nInformation about target data (y):")
print(y.info())

print("\nDescriptive statistics of feature data (X):")
print(x.describe())

# Data preparation
scaler = StandardScaler()
x_scaled = scaler.fit_transform(x.values)
x_train, x_test, y_train, y_test = train_test_split(x_scaled, y.values, test_size=0.2, random_state=42)
print("\nShapes of train and test sets after splitting:")
print(x_train.shape, x_test.shape, y_train.shape, y_test.shape)

# Model training
model = GaussianNB()
model.fit(x_train, y_train)

# Model evaluation
y_pred = model.predict(x_test)
cm = confusion_matrix(y_test, y_pred)
print("\nConfusion Matrix:")
print(cm)

plot_confusion_matrix(conf_mat=cm, figsize=(5,5), show_normed=True)
plt.show()

print(f"\nTrue Positives (TP) value is {cm[0,0]}")
print(f"True Negatives (TN) value is {cm[1,1] + cm[2,2]}")
print(f"False Positives (FP) value is {cm[0,1] + cm[0,2]}")
print(f"False Negatives (FN) value is {cm[1,0] + cm[2,0]}")

print(f"\nAccuracy score is {accuracy_score(y_test, y_pred)}")
print(f"Error rate is {1 - accuracy_score(y_test, y_pred)}")
print(f"Precision score is {precision_score(y_test, y_pred, average='macro')}")
print(f"Recall score is {recall_score(y_test, y_pred, average='macro')}")

print("\nClassification Report:")
print(classification_report(y_test, y_pred))